{"uid":"6b42be98248f36cd","name":"Test Spinner Join Without Starting Thread","fullName":"tests.test_00_spinner#test_spinner_join_without_start","historyId":"4567e7c68f1f3a5d6769dac5a4f7002a","time":{"start":1744782966353,"stop":1744782966353,"duration":0},"description":"Verifica que el hilo del spinner no se inicia si no se llama al método start, asegurando que join no cause errores.","descriptionHtml":"<p>Verifica que el hilo del spinner no se inicia si no se llama al método start, asegurando que join no cause errores.</p>\n","status":"broken","statusMessage":"RuntimeError: cannot join thread before it is started","statusTrace":"@allure.feature(\"Spinner Functionality\")\n    @allure.title(\"Test Spinner Join Without Starting Thread\")\n    @allure.description(\"Verifica que el hilo del spinner no se inicia si no se llama al método start, asegurando que join no cause errores.\")\n    @allure.tag(\"spinner\", \"unit\", \"negative\")\n    @allure.severity(Severity.NORMAL)\n    def test_spinner_join_without_start():\n        stop_event = threading.Event()\n        spinner_thread = threading.Thread(target=spinner, args=(stop_event,))\n    \n        # No iniciar el hilo, solo llamar a join\n>       spinner_thread.join(timeout=0.1)\n\ntests\\test_00_spinner.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Thread(Thread-1 (spinner), initial)>, timeout = 0.1\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n    \n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n    \n        When the timeout argument is present and not None, it should be a\n        floating-point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        is_alive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n    \n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n    \n        A thread can be join()ed many times.\n    \n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n    \n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n>           raise RuntimeError(\"cannot join thread before it is started\")\nE           RuntimeError: cannot join thread before it is started\n\nC:\\Users\\emanu\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\threading.py:1083: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"spinner"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"unit"},{"name":"feature","value":"Spinner Functionality"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_00_spinner"},{"name":"host","value":"emanuelZuluaga"},{"name":"thread","value":"26332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_00_spinner"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test Defects","matchedStatuses":["broken"]}],"tags":["negative","unit","spinner"]},"source":"6b42be98248f36cd.json","parameterValues":[]}