MAIN.PY:

from modules import Authentication, Analytics, report, getData, spinner
from getpass import getpass
import threading

class dataBase: # Fake
    def __init__(self) -> None:
        pass
    def connection(self): # Stub
        return "Success"
    def db(self):# Stub
        return {"user1":"pass1","user2":"pass2"}

AuthSystem = Authentication(dataBase())

# Crear un hilo paralelo para el spinner de carga
stop_event = threading.Event()
spinner_thread = threading.Thread(target=spinner, args=(stop_event,))

print(f"===========================================================")
print(f"============== Sistema de análisis de datos ===============")
print(f"===========================================================")
print("Por favor inicie sesión.")

session = AuthSystem.getSession()
tries = 0
while tries < 3:
    user = input("Ingrese usuario: ")
    password = getpass("Contraseña: ")
    if AuthSystem.login(user, password):
        session = AuthSystem.getSession()
        break

    tries += 1

if session:
    print(f"===========================================================")
    print(f"==================== Bienvenid@ {user} ====================")
    print(f"===========================================================")
    print("Obteniendo datos de ... https://data.urbansharing.com/bergenbysykkel.no/trips/v1/2024/09.json")

    data_response = getData("https://data.urbansharing.com/bergenbysykkel.no/trips/v1/2024/09.json","data/input") 

    AnalyticsModule = Analytics()
    analized_data = AnalyticsModule.AnalizeData()

    if data_response:
        print("Generando reporte...")
        spinner_thread.start()
        report("data/output/report.pdf", analized_data, user)
        stop_event.set()
    else:
        print("No hay datos para generar reporte.")

spinner_thread.join()
print("=================== Programa finalizado ===================")

SPINNER.PY:

import itertools
import time
import sys
def spinner(stop_event):
    spinner_cycle = itertools.cycle(['-', '/', '|', '\\'])
    while not stop_event.is_set():  # El spinner se detendrá cuando el evento esté activado
        sys.stdout.write(next(spinner_cycle))
        sys.stdout.flush()
        sys.stdout.write('\b')  # Borra el símbolo anterior
        time.sleep(0.1)


AUTHENTICATION.PY:
class Authentication:
    def __init__(self, userDataBase):
        self.dataBaseObject = userDataBase
        self.session = False
    
    def login (self, user, password):

        if not(isinstance(user,str)) or not(isinstance(password,str)):
            raise ValueError("El usuario y/o la contraseña deben ser str.")

        if self.dataBaseObject.connection() != "Success":
            print("Error al conectar la base de datos.")
            return False
        
        if self.session == True:
            print("Ya hay una sesión activa.")
            return True
        
        db = self.dataBaseObject.db() 

        if user in db and db[user] == password:
            self.session = True
            return True
        else:
            print("Usuario y/o contraseña inválidos.")
            return False
    
    def logout (self):
        self.session = False
        print("Sesión cerrada con éxito.")
    
    def getSession(self):
        return self.session

        
REQUEST.PY:
import requests
import pandas as pd

def getData(url,path):
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        try:
            df = pd.DataFrame(data)
            df = df.iloc[0:10000] 
            print("Guardando datos en data/input/datos.xlsx ...")
            df.to_excel(f"{path}/data.xlsx",index=False)
            print("Datos obtenidos y guardados.")
        except:
            print("Error al convertir y almacenar el archivo.")
            return False
        return True
    else:
        print("Error obteniendo datos del servidor.")
        return False


ANALYTICS.PY

from ._01authentication import Authentication
from ._02request import getData
from ._04report import report
import pandas as pd
from geopy.distance import geodesic

class Analytics:
    def __init__(self):
        pass

    def AnalizeData(self):
        print("Leyendo datos...")
        data = pd.read_excel("data/input/data.xlsx")

        print("Analizando datos...")

        # Borrar duplicados
        data = data[data["start_station_name"] != data["end_station_name"]]

        # Rutas más populares
        data["route"] = data["start_station_name"] + " to " + data["end_station_name"] 
        most_popular_routes = data["route"].value_counts().reset_index().head(10)

        # Distancias más grandes entre estaciones
        def CalculateDistance(row):
            start_coords = (row["start_station_latitude"], row["start_station_longitude"])
            end_coords = (row["end_station_latitude"], row["end_station_longitude"])
            return geodesic(start_coords, end_coords).kilometers

        data["distance_km"] = data.apply(CalculateDistance, axis=1) 
        distance_between_routes = data[["route","distance_km"]].sort_values(by="distance_km", ascending=False).drop_duplicates().reset_index().drop(columns="index").head(10) 

        # Mayor duración promedio
        average_route_durations = data.groupby('route').agg(
            avg_duration=('duration', 'mean'), 
            trip_count=('route', 'count')
        ).reset_index()

        longest_duration_routes = average_route_durations.sort_values(by='avg_duration', ascending=False).reset_index().drop(columns="index").head(10)

        # New analysis for duration and distance statistics
        data['duration']
        duration_stats = {
            'mean': data['duration'].mean(),
            'variance': data['duration'].var(),
            'std_dev': data['duration'].std(),
            'max': data['duration'].max(),
            'min': data['duration'].min(),
            '25th_percentile': data['duration'].quantile(0.25),
            '50th_percentile': data['duration'].quantile(0.50),
            '75th_percentile': data['duration'].quantile(0.75)
        }

        distance_stats = {
            'mean': data['distance_km'].mean(),
            'variance': data['distance_km'].var(),
            'std_dev': data['distance_km'].std(),
            'max': data['distance_km'].max(),
            'min': data['distance_km'].min(),
            '25th_percentile': data['distance_km'].quantile(0.25),
            '50th_percentile': data['distance_km'].quantile(0.50),
            '75th_percentile': data['distance_km'].quantile(0.75)
        }

        # Combine stats into a single DataFrame for reporting
        stats_df = pd.DataFrame({
            'Statistic': ['Mean', 'Variance', 'Standard Deviation', 'Max', 'Min', '25th Percentile', '50th Percentile', '75th Percentile'],
            'Duration': [duration_stats['mean'], duration_stats['variance'], duration_stats['std_dev'], duration_stats['max'], duration_stats['min'], duration_stats['25th_percentile'], duration_stats['50th_percentile'], duration_stats['75th_percentile']],
            'Distance (km)': [distance_stats['mean'], distance_stats['variance'], distance_stats['std_dev'], distance_stats['max'], distance_stats['min'], distance_stats['25th_percentile'], distance_stats['50th_percentile'], distance_stats['75th_percentile']]
        })

        self.analizedData = {
            "data": data,
            "most_popular_routes": most_popular_routes,
            "distance_between_routes": distance_between_routes,
            "longest_duration_routes": longest_duration_routes,
            "stats": stats_df  # Add the new stats DataFrame
        }
        return self.analizedData
    
        
REPORT.PY:
import os
import pandas as pd
import matplotlib.pyplot as plt
from geopy.distance import geodesic
import geopandas as gpd
from shapely.geometry import Point
import contextily as ctx
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Image, Spacer
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from datetime import datetime
import seaborn as sns

class PDFWithHeaderFooter(SimpleDocTemplate):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
    def build(self, flowables, onFirstPage=None, onLaterPages=None, canvasmaker=canvas.Canvas):
        if onFirstPage is None:
            onFirstPage = self._header_footer
        if onLaterPages is None:
            onLaterPages = self._header_footer
        
        super().build(flowables, onFirstPage=onFirstPage, onLaterPages=onLaterPages, canvasmaker=canvasmaker)

    def _header_footer(self, canvas, doc):
        canvas.saveState()

        # Header
        logo_path = 'assets/usb.jpg'
        canvas.drawImage(logo_path, 50, 730, width=50, height=50)  # Image on the left

        header_text = f"Pruebas de Software | Reporte creado el {datetime.now().strftime('%Y-%m-%d')}"
        canvas.setFont('Helvetica-Bold', 12)
        canvas.drawRightString(550, 760, header_text)  # Right-aligned header text

        # Footer
        footer_text = "(c) Contenido confidencial, todos los derechos reservados"
        canvas.setFont('Helvetica', 10)
        canvas.drawCentredString(300, 30, footer_text)  # Center-aligned footer text

        canvas.restoreState()

# Function to generate the bar chart and return a buffer
def create_bar_chart(df, y_column, title):
    plt.figure(figsize=(8, 6))
    df.plot(kind='bar', y=y_column, legend=False)
    plt.title(title)
    plt.ylabel(y_column)
    plt.xticks(rotation=90)
    
    # Save to a buffer
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close() 
    return buffer

# Function to convert DataFrame to a ReportLab Table
def dataframe_to_table(df):
    table_data = [list(df.columns)] + df.values.tolist()
    return Table(table_data)

# Create the map plot for bike stations
def create_map_plot(data):
    # Create GeoDataFrames for start and end stations
    gdf_start = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data['start_station_longitude'], data['start_station_latitude']))
    gdf_end = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data['end_station_longitude'], data['end_station_latitude']))

    # Combine start and end stations into one GeoDataFrame, keeping unique stations
    gdf_all_stations = pd.concat([gdf_start[['start_station_name', 'geometry']],
                                  gdf_end[['end_station_name', 'geometry']].rename(columns={'end_station_name': 'start_station_name'})]).drop_duplicates()

    gdf_all_stations = gdf_all_stations.set_crs(epsg=4326)

    # Plotting the stations with a basemap
    fig, ax = plt.subplots(figsize=(10, 8))
    gdf_all_stations.plot(ax=ax, marker='o', color='red', markersize=5)
    try:
        ctx.add_basemap(ax, crs=gdf_all_stations.crs)
    except:
        print("No se pudo obtener la imagen del mapa de fondo. Problemas de conexión con el servidor.")

    # Customize the map
    plt.title('Ubicación de las estaciones')
    plt.xlabel('Longitud')
    plt.ylabel('Latitud')
    ax.set_aspect('equal', 'box')

    # Save the plot to a buffer
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# Función para crear el gráfico de distribuciones (histogramas para Duration y Distance)
def create_distribution_plots(data):
    plt.figure(figsize=(12, 6))
    
    # Histograma de Duration
    plt.subplot(1, 2, 1)
    plt.hist(data['duration'], bins=30, color='blue', alpha=0.7)
    plt.title('Distribution of Duration')
    plt.xlabel('Duration')
    plt.ylabel('Frequency')
    
    # Histograma de Distance
    plt.subplot(1, 2, 2)
    plt.hist(data['distance_km'], bins=30, color='green', alpha=0.7)
    plt.title('Distribution of Distance')
    plt.xlabel('Distance (km)')
    plt.ylabel('Frequency')
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# Función para crear el gráfico scatter (Duration vs Distance)
def create_scatter_plot(data):
    plt.figure(figsize=(8, 6))
    plt.scatter(data['duration'], data['distance_km'], alpha=0.5)
    plt.title('Duration vs Distance')
    plt.xlabel('Duration')
    plt.ylabel('Distance (km)')
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# Función para crear box plots para Duration y Distance
def create_box_plots(data):
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.boxplot(data['duration'], vert=False)
    plt.title('Box Plot of Duration')
    plt.xlabel('Duration')
    
    plt.subplot(1, 2, 2)
    plt.boxplot(data['distance_km'], vert=False)
    plt.title('Box Plot of Distance (km)')
    plt.xlabel('Distance (km)')
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# Función principal que genera el reporte PDF
def report(filePath, analized_data, username):
    most_popular_routes = analized_data["most_popular_routes"]
    distance_between_routes = analized_data["distance_between_routes"]
    longest_duration_routes = analized_data["longest_duration_routes"]
    data = analized_data["data"]

    pdf_buffer = BytesIO()
    doc = PDFWithHeaderFooter(pdf_buffer, pagesize=letter, 
                              topMargin=1.5*inch, bottomMargin=1.5*inch, 
                              leftMargin=0.75*inch, rightMargin=0.75*inch)

    elements = []
    styles = getSampleStyleSheet()

    # Párrafos descriptivos
    report_date = datetime.now().strftime('%Y-%m-%d')
    description = ("Este reporte presenta las rutas de bicicleta más populares en el sistema de bicicletas públicas de Noruega, "
                   "las distancias más largas entre estaciones, y la mayor duración promedio de rutas en base a los datos proporcionados.")
    elements.append(Paragraph(description, styles['BodyText']))
    elements.append(Spacer(1, 12))
    created = f"Creado por {username} el {report_date}."
    elements.append(Paragraph(created, styles['BodyText']))
    elements.append(Spacer(1, 12))

    # Agregar el mapa
    map_buffer = create_map_plot(data)
    elements.append(Image(map_buffer, width=500, height=400))

    # Tabla y gráfico de Most Popular Routes
    elements.append(Paragraph("Most Popular Routes", styles['Heading2']))
    table_most_popular = dataframe_to_table(most_popular_routes)
    table_most_popular.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)
    ]))
    elements.append(table_most_popular)
    buffer_most_popular = create_bar_chart(most_popular_routes, 'count', 'Most Popular Routes')
    elements.append(Image(buffer_most_popular, width=400, height=300))

    # Tabla y gráfico de Routes with the Largest Distances
    elements.append(Paragraph("Routes with the Largest Distances", styles['Heading2']))
    table_distances = dataframe_to_table(distance_between_routes)
    table_distances.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)
    ]))
    elements.append(table_distances)
    buffer_distances = create_bar_chart(distance_between_routes, 'distance_km', 'Longest Distances Between Stations')
    elements.append(Image(buffer_distances, width=400, height=300))

    # Tabla y gráfico de Routes with the Longest Average Duration
    elements.append(Paragraph("Routes with the Longest Average Duration", styles['Heading2']))
    table_longest_duration = dataframe_to_table(longest_duration_routes)
    table_longest_duration.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)
    ]))
    elements.append(table_longest_duration)
    buffer_longest_duration = create_bar_chart(longest_duration_routes, 'avg_duration', 'Longest Average Durations')
    elements.append(Image(buffer_longest_duration, width=400, height=300))

    # Tabla de estadísticas
    elements.append(Paragraph("Statistics for Duration and Distance", styles['Heading2']))
    table_stats = dataframe_to_table(analized_data["stats"])
    table_stats.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige)
    ]))
    elements.append(table_stats)

    # Gráfico de distribuciones (histogramas)
    buffer_distribution = create_distribution_plots(data)
    elements.append(Image(buffer_distribution, width=800, height=400))
    
    # Gráfico scatter (Duration vs Distance)
    buffer_scatter = create_scatter_plot(data)
    elements.append(Image(buffer_scatter, width=600, height=400))
    
    # Gráfico de box plots (Duration y Distance)
    buffer_box = create_box_plots(data)
    elements.append(Image(buffer_box, width=800, height=400))
    
    # Correlation Heatmap
    correlation_matrix = data[['duration', 'distance_km']].corr()
    plt.figure(figsize=(6, 5))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', square=True)
    plt.title('Correlation Heatmap')
    buffer_heatmap = BytesIO()
    plt.savefig(buffer_heatmap, format='png')
    buffer_heatmap.seek(0)
    plt.close()
    elements.append(Image(buffer_heatmap, width=600, height=400))

    # Construir el PDF
    doc.build(elements)

    # Cerrar buffers utilizados
    buffer_most_popular.close()
    buffer_distances.close()
    buffer_longest_duration.close()
    map_buffer.close()
    buffer_distribution.close()
    buffer_scatter.close()
    buffer_box.close()
    buffer_heatmap.close()

    # Guardar el PDF en un archivo
    with open(filePath, 'wb') as f:
        f.write(pdf_buffer.getvalue())

    print("Reporte generado con éxito.")

    # Abrir el archivo PDF (solo en Windows)
    os.startfile(".\\"+filePath)
    # Para otros sistemas operativos:
    # os.system(f'xdg-open "{filePath}"')  # Linux
    # os.system(f'open "{filePath}"')       # macOS

    pdf_buffer.close()
