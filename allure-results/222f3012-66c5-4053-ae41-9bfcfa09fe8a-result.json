{"name": "Test Data Analysis with Empty DataFrame", "status": "broken", "statusDetails": {"message": "ValueError: Cannot set a DataFrame with multiple columns to the single column distance_km", "trace": "@allure.feature(\"Data Analytics System\")\n    @allure.title(\"Test Data Analysis with Empty DataFrame\")\n    @allure.description(\"Verifica que el método AnalizeData maneja un DataFrame vacío, aunque el módulo no lo procesa correctamente y puede fallar. Debería retornar resultados vacíos.\")\n    @allure.tag(\"analytics\", \"unit\", \"negative\")\n    @allure.severity(Severity.NORMAL)\n    def test_analyze_data_empty():\n        empty_data = pd.DataFrame(columns=[\n            \"start_station_name\", \"end_station_name\",\n            \"start_station_latitude\", \"start_station_longitude\",\n            \"end_station_latitude\", \"end_station_longitude\",\n            \"duration\"\n        ])\n    \n        with patch(\"pandas.read_excel\", return_value=empty_data):\n            with patch(\"geopy.distance.geodesic\", return_value=MockDistance(0)):\n                analytics = Analytics()\n>               result = analytics.AnalizeData()\n\ntests\\test_03_analytics.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodules\\_03analytics.py:30: in AnalizeData\n    data[\"distance_km\"] = data.apply(CalculateDistance, axis=1)\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:4301: in __setitem__\n    self._set_item_frame_value(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Empty DataFrame\nColumns: [start_station_name, end_station_name, start_station_latitude, start_station_longitude, end_station_latitude, end_station_longitude, duration, route]\nIndex: []\nkey = 'distance_km'\nvalue = Empty DataFrame\nColumns: [start_station_name, end_station_name, start_station_latitude, start_station_longitude, end_station_latitude, end_station_longitude, duration, route]\nIndex: []\n\n    def _set_item_frame_value(self, key, value: DataFrame) -> None:\n        self._ensure_valid_index(value)\n    \n        # align columns\n        if key in self.columns:\n            loc = self.columns.get_loc(key)\n            cols = self.columns[loc]\n            len_cols = 1 if is_scalar(cols) or isinstance(cols, tuple) else len(cols)\n            if len_cols != len(value.columns):\n                raise ValueError(\"Columns must be same length as key\")\n    \n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, MultiIndex) and isinstance(\n                loc, (slice, Series, np.ndarray, Index)\n            ):\n                cols_droplevel = maybe_droplevels(cols, key)\n                if len(cols_droplevel) and not cols_droplevel.equals(value.columns):\n                    value = value.reindex(cols_droplevel, axis=1)\n    \n                for col, col_droplevel in zip(cols, cols_droplevel):\n                    self[col] = value[col_droplevel]\n                return\n    \n            if is_scalar(cols):\n                self[cols] = value[value.columns[0]]\n                return\n    \n            locs: np.ndarray | list\n            if isinstance(loc, slice):\n                locs = np.arange(loc.start, loc.stop, loc.step)\n            elif is_scalar(loc):\n                locs = [loc]\n            else:\n                locs = loc.nonzero()[0]\n    \n            return self.isetitem(locs, value)\n    \n        if len(value.columns) > 1:\n>           raise ValueError(\n                \"Cannot set a DataFrame with multiple columns to the single \"\n                f\"column {key}\"\nE               ValueError: Cannot set a DataFrame with multiple columns to the single column distance_km\n\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:4459: ValueError"}, "description": "Verifica que el método AnalizeData maneja un DataFrame vacío, aunque el módulo no lo procesa correctamente y puede fallar. Debería retornar resultados vacíos.", "attachments": [{"name": "stdout", "source": "86e34539-ba80-48a5-b260-791fb5ce36ff-attachment.txt", "type": "text/plain"}], "start": 1744782968889, "stop": 1744782968892, "uuid": "00f42ce6-b937-48ae-8496-daefb415080a", "historyId": "efcbb41823416fe872bd7e0da47d82ce", "testCaseId": "efcbb41823416fe872bd7e0da47d82ce", "fullName": "tests.test_03_analytics#test_analyze_data_empty", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "negative"}, {"name": "tag", "value": "unit"}, {"name": "tag", "value": "analytics"}, {"name": "feature", "value": "Data Analytics System"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_03_analytics"}, {"name": "host", "value": "emanuelZuluaga"}, {"name": "thread", "value": "26332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_03_analytics"}]}