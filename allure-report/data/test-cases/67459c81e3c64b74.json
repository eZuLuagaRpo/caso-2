{"uid":"67459c81e3c64b74","name":"Test Spinner Stops on Error","fullName":"tests.test_00_spinner#test_spinner_stops_on_error","historyId":"a67d741b5218fc52e0d1d7d315c7a300","time":{"start":1744782966485,"stop":1744782967589,"duration":1104},"description":"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.","descriptionHtml":"<p>Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.</p>\n","status":"failed","statusMessage":"AssertionError: Spinner did not stop after error\nassert not True\n +  where True = is_alive()\n +    where is_alive = <Thread(Thread-2 (spinner), started 14444)>.is_alive","statusTrace":"@allure.feature(\"Spinner Functionality\")\n    @allure.title(\"Test Spinner Stops on Error\")\n    @allure.description(\"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.\")\n    @allure.tag(\"spinner\", \"unit\", \"positive\")\n    @allure.severity(Severity.CRITICAL)\n    def test_spinner_stops_on_error():\n        stop_event = threading.Event()\n        spinner_thread = threading.Thread(target=spinner, args=(stop_event,))\n        spinner_thread.start()\n    \n        try:\n            time.sleep(0.5)\n>           raise RuntimeError(\"Simulated error\")\nE           RuntimeError: Simulated error\n\ntests\\test_00_spinner.py:39: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature(\"Spinner Functionality\")\n    @allure.title(\"Test Spinner Stops on Error\")\n    @allure.description(\"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.\")\n    @allure.tag(\"spinner\", \"unit\", \"positive\")\n    @allure.severity(Severity.CRITICAL)\n    def test_spinner_stops_on_error():\n        stop_event = threading.Event()\n        spinner_thread = threading.Thread(target=spinner, args=(stop_event,))\n        spinner_thread.start()\n    \n        try:\n            time.sleep(0.5)\n            raise RuntimeError(\"Simulated error\")\n        except RuntimeError:\n            time.sleep(0.5)\n            spinner_thread.join(timeout=0.1)\n>           assert not spinner_thread.is_alive(), \"Spinner did not stop after error\"\nE           AssertionError: Spinner did not stop after error\nE           assert not True\nE            +  where True = is_alive()\nE            +    where is_alive = <Thread(Thread-2 (spinner), started 14444)>.is_alive\n\ntests\\test_00_spinner.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.","status":"failed","statusMessage":"AssertionError: Spinner did not stop after error\nassert not True\n +  where True = is_alive()\n +    where is_alive = <Thread(Thread-2 (spinner), started 14444)>.is_alive","statusTrace":"@allure.feature(\"Spinner Functionality\")\n    @allure.title(\"Test Spinner Stops on Error\")\n    @allure.description(\"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.\")\n    @allure.tag(\"spinner\", \"unit\", \"positive\")\n    @allure.severity(Severity.CRITICAL)\n    def test_spinner_stops_on_error():\n        stop_event = threading.Event()\n        spinner_thread = threading.Thread(target=spinner, args=(stop_event,))\n        spinner_thread.start()\n    \n        try:\n            time.sleep(0.5)\n>           raise RuntimeError(\"Simulated error\")\nE           RuntimeError: Simulated error\n\ntests\\test_00_spinner.py:39: RuntimeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.feature(\"Spinner Functionality\")\n    @allure.title(\"Test Spinner Stops on Error\")\n    @allure.description(\"Verifica que el hilo del spinner se detiene correctamente cuando ocurre un error en el programa, asegurando que no permanezca activo.\")\n    @allure.tag(\"spinner\", \"unit\", \"positive\")\n    @allure.severity(Severity.CRITICAL)\n    def test_spinner_stops_on_error():\n        stop_event = threading.Event()\n        spinner_thread = threading.Thread(target=spinner, args=(stop_event,))\n        spinner_thread.start()\n    \n        try:\n            time.sleep(0.5)\n            raise RuntimeError(\"Simulated error\")\n        except RuntimeError:\n            time.sleep(0.5)\n            spinner_thread.join(timeout=0.1)\n>           assert not spinner_thread.is_alive(), \"Spinner did not stop after error\"\nE           AssertionError: Spinner did not stop after error\nE           assert not True\nE            +  where True = is_alive()\nE            +    where is_alive = <Thread(Thread-2 (spinner), started 14444)>.is_alive\n\ntests\\test_00_spinner.py:43: AssertionError","steps":[],"attachments":[{"uid":"c3122ec24ee3bcdd","name":"stdout","source":"c3122ec24ee3bcdd.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"spinner"},{"name":"tag","value":"unit"},{"name":"severity","value":"critical"},{"name":"feature","value":"Spinner Functionality"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_00_spinner"},{"name":"host","value":"emanuelZuluaga"},{"name":"thread","value":"26332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_00_spinner"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["unit","positive","spinner"]},"source":"67459c81e3c64b74.json","parameterValues":[]}