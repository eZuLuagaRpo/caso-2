{"uid":"655902bc47dc853c","name":"Test File Write Error Handling","fullName":"tests.test_02_request#test_file_write_error","historyId":"fb8df496069da0229ec0ccde7bbfc9bc","time":{"start":1744782968501,"stop":1744782968868,"duration":367},"description":"Verifica que la función getData maneja correctamente errores de escritura de archivo (por ejemplo, directorio de solo lectura), devuelve False y no crea un archivo Excel.","descriptionHtml":"<p>Verifica que la función getData maneja correctamente errores de escritura de archivo (por ejemplo, directorio de solo lectura), devuelve False y no crea un archivo Excel.</p>\n","status":"failed","statusMessage":"AssertionError: assert True == False","statusTrace":"temp_dir = WindowsPath('C:/Users/emanu/AppData/Local/Temp/pytest-of-emanu/pytest-61/test_file_write_error0')\n\n    @allure.feature(\"Data Request System\")\n    @allure.title(\"Test File Write Error Handling\")\n    @allure.description(\"Verifica que la función getData maneja correctamente errores de escritura de archivo (por ejemplo, directorio de solo lectura), devuelve False y no crea un archivo Excel.\")\n    @allure.tag(\"request\", \"unit\", \"edge\")\n    @allure.severity(Severity.MINOR)\n    def test_file_write_error(temp_dir):\n        mock_response = MagicMock()\n        # Crear un mock para requests.get\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = data\n    \n        # Crear un directorio de solo lectura\n        read_only_dir = temp_dir / \"readonly\"\n        read_only_dir.mkdir()\n        os.chmod(read_only_dir, 0o444)  # Establecer permisos de solo lectura\n    \n        with patch(\"modules._02request.requests.get\", return_value=mock_response):\n            # Llamar a getData con un directorio de solo lectura\n            result = getData(\"https://example.com/api/data\", str(read_only_dir))\n    \n            # Verificar que la función retorna False\n>           assert result == False\nE           assert True == False\n\ntests\\test_02_request.py:109: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"tmp_path_factory","time":{"start":1744782967635,"stop":1744782967635,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"tmp_path","time":{"start":1744782968499,"stop":1744782968500,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"temp_dir","time":{"start":1744782968500,"stop":1744782968500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"Verifica que la función getData maneja correctamente errores de escritura de archivo (por ejemplo, directorio de solo lectura), devuelve False y no crea un archivo Excel.","status":"failed","statusMessage":"AssertionError: assert True == False","statusTrace":"temp_dir = WindowsPath('C:/Users/emanu/AppData/Local/Temp/pytest-of-emanu/pytest-61/test_file_write_error0')\n\n    @allure.feature(\"Data Request System\")\n    @allure.title(\"Test File Write Error Handling\")\n    @allure.description(\"Verifica que la función getData maneja correctamente errores de escritura de archivo (por ejemplo, directorio de solo lectura), devuelve False y no crea un archivo Excel.\")\n    @allure.tag(\"request\", \"unit\", \"edge\")\n    @allure.severity(Severity.MINOR)\n    def test_file_write_error(temp_dir):\n        mock_response = MagicMock()\n        # Crear un mock para requests.get\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = data\n    \n        # Crear un directorio de solo lectura\n        read_only_dir = temp_dir / \"readonly\"\n        read_only_dir.mkdir()\n        os.chmod(read_only_dir, 0o444)  # Establecer permisos de solo lectura\n    \n        with patch(\"modules._02request.requests.get\", return_value=mock_response):\n            # Llamar a getData con un directorio de solo lectura\n            result = getData(\"https://example.com/api/data\", str(read_only_dir))\n    \n            # Verificar que la función retorna False\n>           assert result == False\nE           assert True == False\n\ntests\\test_02_request.py:109: AssertionError","steps":[],"attachments":[{"uid":"81a2b985a9077637","name":"stdout","source":"81a2b985a9077637.txt","type":"text/plain","size":80}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"tmp_path::0","time":{"start":1744782968872,"stop":1744782968872,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"tag","value":"unit"},{"name":"tag","value":"edge"},{"name":"feature","value":"Data Request System"},{"name":"severity","value":"minor"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_02_request"},{"name":"host","value":"emanuelZuluaga"},{"name":"thread","value":"26332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_02_request"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["request","unit","edge"]},"source":"655902bc47dc853c.json","parameterValues":[]}