{"uid":"7bb16e675ef728c9","name":"Test Login with None Database","fullName":"tests.test_01_authentication#test_none_database","historyId":"dce2a8f6d667f6a8c28d628281c3fec9","time":{"start":1744782967623,"stop":1744782967624,"duration":1},"description":"Verifica que el método login devuelve False cuando la base de datos devuelve None, simulando un error en la base de datos.","descriptionHtml":"<p>Verifica que el método login devuelve False cuando la base de datos devuelve None, simulando un error en la base de datos.</p>\n","status":"broken","statusMessage":"TypeError: argument of type 'NoneType' is not iterable","statusTrace":"@allure.feature(\"Authentication System\")\n    @allure.title(\"Test Login with None Database\")\n    @allure.description(\"Verifica que el método login devuelve False cuando la base de datos devuelve None, simulando un error en la base de datos.\")\n    @allure.tag(\"authentication\", \"unit\", \"negative\")\n    @allure.severity(Severity.NORMAL)\n    def test_none_database():\n        mock_db = Mock()\n        mock_db.connection.return_value = \"Success\"\n        mock_db.db.return_value = None\n        auth = Authentication(mock_db)\n>       assert auth.login(\"test_user\", \"test_password\") == False\n\ntests\\test_01_authentication.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <modules._01authentication.Authentication object at 0x00000285284357B0>, user = 'test_user', password = 'test_password'\n\n    def login (self, user, password):\n    \n        if not(isinstance(user,str)) or not(isinstance(password,str)):\n            raise ValueError(\"El usuario y/o la contraseña deben ser str.\")\n    \n        if self.dataBaseObject.connection() != \"Success\":\n            print(\"Error al conectar la base de datos.\")\n            return False\n    \n        if self.session == True:\n            print(\"Ya hay una sesión activa.\")\n            return True\n    \n        db = self.dataBaseObject.db()\n    \n>       if user in db and db[user] == password:\nE       TypeError: argument of type 'NoneType' is not iterable\n\nmodules\\_01authentication.py:21: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"unit"},{"name":"feature","value":"Authentication System"},{"name":"tag","value":"authentication"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_01_authentication"},{"name":"host","value":"emanuelZuluaga"},{"name":"thread","value":"26332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_01_authentication"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test Defects","matchedStatuses":["broken"]}],"tags":["negative","unit","authentication"]},"source":"7bb16e675ef728c9.json","parameterValues":[]}